name: OpenSSL 3.5 Build
on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (Debug/Release)'
        required: true
        default: 'Release'
      architecture:
        description: 'Target architecture (x64/x86)'
        required: true
        default: 'x64'
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Download OpenSSL 3.5.0 Source
        run: |
          Write-Host "Downloading OpenSSL 3.5.0 source..."
          Invoke-WebRequest -Uri "https://github.com/openssl/openssl/archive/refs/tags/openssl-3.5.0.zip" -OutFile "openssl.zip"
          
          Write-Host "Verifying download..."
          if (!(Test-Path "openssl.zip")) {
            throw "Failed to download openssl.zip"
          }
          
          Write-Host "Extracting archive..."
          Expand-Archive -Path "openssl.zip" -DestinationPath "." -Force
          
          Write-Host "Checking extracted contents..."
          Get-ChildItem -Path "." -Directory | Where-Object { $_.Name -like "*openssl*" } | ForEach-Object { Write-Host "Found: $($_.Name)" }
          
          Write-Host "Renaming directory..."
          if (Test-Path "openssl-openssl-3.5.0") {
            Rename-Item -Path "openssl-openssl-3.5.0" -NewName "openssl"
          } else {
            throw "Expected directory 'openssl-openssl-3.5.0' not found"
          }
          
          Write-Host "Verifying final structure..."
          if (!(Test-Path "openssl")) {
            throw "OpenSSL directory was not created successfully"
          }
          
          Write-Host "Contents of openssl directory:"
          Get-ChildItem -Path "openssl" | Select-Object -First 10 | ForEach-Object { Write-Host "  $($_.Name)" }
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        
      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ github.event.inputs.architecture || 'x64' }}
          
      - name: Install NASM
        run: |
          Invoke-WebRequest -Uri "https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-installer-x64.exe" -OutFile "nasm-installer.exe"
          Start-Process ".\nasm-installer.exe" -ArgumentList "/S" -Wait
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Install Strawberry Perl
        run: |
          Invoke-WebRequest -Uri "https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit.msi" -OutFile "perl-installer.msi"
          Start-Process "msiexec.exe" -ArgumentList "/i perl-installer.msi /quiet" -Wait
          echo "C:\Strawberry\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Configure OpenSSL
        working-directory: openssl
        run: |
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem | Select-Object -First 10 | ForEach-Object { Write-Host "  $($_.Name)" }
          
          Write-Host "Running OpenSSL Configure..."
          perl Configure VC-WIN64A no-shared --prefix=C:\OpenSSL --openssldir=C:\OpenSSL\ssl
          if ($LASTEXITCODE -ne 0) { 
            Write-Error "Configure failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE 
          }
          
      - name: Build OpenSSL
        working-directory: openssl
        run: |
          nmake
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
      - name: Install OpenSSL
        working-directory: openssl
        run: |
          nmake install
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
      - name: Run Tests
        working-directory: openssl
        run: |
          nmake test
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
      - name: Verify Installation
        run: |
          C:\OpenSSL\bin\openssl version
          C:\OpenSSL\bin\openssl list -signature-algorithms
          
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openssl-${{ github.event.inputs.architecture || 'x64' }}-${{ github.event.inputs.build_type || 'Release' }}
          path: C:\OpenSSL\**
